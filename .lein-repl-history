(conj [] [99 77])
(conj [99] [88 77])
(doc append)
(doc conj)
(map #(conj [2 3] %) [4 5 6])
  (println (/ 2520 10)
           (/ 2520 9)
           (/ 2520 8)
           (/ 2520 7)
           (/ 2520 6)
           (/ 2520 5)
           (/ 2520 4)
           (/ 2520 3)
           (/ 2520 2))
(get-adders 5)
(filter [1 2 3 4] [2 4])
(get-squares 4)
(+ 2 2)
(rest [1])
(mapcat + [[1 1] [2 2] [3 3]])
(map + [[1 1] [2 2] [3 3]])
(map inc [[1 1] [2 2] [3 3]])
(map inc [1 2 3 4])
(mapcat inc [[1 1] [2 2] [3 3]])
(mapcat reverse [[1 2] [4 5] [7 8]])
(mapcat #(+ 2 %) [[1 1] [2 2] [3 3]])
(juxt 1)
(mapcat (juxt inc dec) [1 2 3 4])
(map (juxt inc dec) [1 2 3 4])
(Math/log10 10)
(Math/log10 20)
(Math/log10 8)
(defn log [n] (Math/log10 n))
10
(log 10)
(/ (log 10) (log 2))
(defn divide [tri-num divisor] (/ (log tri-num) (log divisor)))
(divide 6 2)
(divide 10 2)
(divide 100 2)
(log 20)
(divide 20 2)
(defn log2 [n] (/ (Math/log n) (Math/log 2)))
(log2 16)
(log2 10)
(log 10)
(Math/log 10)
(log2 8)
(log2 1)
(log2 2)
(defn divide [number base] (/ (Math/log number) (Math/log base)))
(divide 10 3)
(divide 1000000000 2)
(count-factors 6)
(divide 100000000 2)
(* 1 2 3 4 5 6 7 8 9 10)
(apply * (range 1 501))
(apply * (range 1 501N))
(apply + (range 1 501N))
(Math/pow 2 500)
(require euler.level1.problem012)
(require euler.level1.problem012 :refer :all)
(require euler/level1/problem012.clj)
(require problem012)
(require problem012.clj)
(require /Users/maniginam/eulerProject/euler/src/euler/level1/problem012.clj)
(ns euler.level1.problem012)
(triangle-number 100)
(triangle-numbers 100)
(
)
(
)
triangle-numbers
(triangle-numbers 100)
(let [gina (triangle-numbers 10)] gina)
(euler-12 3)
(defn logn [number base] (/ (Math/log number) (Math/log base)))
(logn 10 2)
(logn 11 2)
(log 12 2)
(logn 12 2)
(logn 13 n)
(logn 13 2)
(logn 14 2)
(logn 15 2)
(logn 16 2)
(logn 10 2)
(logn 1000000000 2)
(logn 1000000000000 2)
(logn 1000000000000000 2)
(logn 1000000000000000000 2)
(logn 10 2)
(logn 100 2)
(logn 1000 2)
(logn 1000000 2)
(defn tri-num [n] (map #(apply + (range 1 (inc %))) (range 1 (inc n))))
(tri-num 100)
(tri-num 1000)
(last (tri-num 10))
(last (tri-num 100))
(last (tri-num 1000))
(last (tri-num 10000))
(last (tri-num 100000))
(last (tri-num 10000))
(logn 50005000 2)
(logn 50005000 3)
(logn 50005000 5)
(logn 50005000 75)
(logn 50005000 7)
(logn 10 2)
(logn 10 3)
(logn 10 4)
(logn 10 5)
(logn 16 2)
(logn 16 3)
(logn 36 2)
(logn 36 3)
(logn 100 2)
(logn 100 3)
(logn 100 4)
(/ (logn 100 2) (logn 100 3))
(/ (logn 1000 2) (logn 1000 3))
(/ (logn 101 2) (logn 101 3))
(/ (logn 21 2) (logn 21 3))
(/ (logn 17 2) (logn 17 3))
(/ (logn 17 3) (logn 17 4))
(/ (logn 21 3) (logn 21 4))
(/ (logn 21 2) (logn 21 4))
(/ (logn 17 2) (logn 17 4))
(/ (logn 17 3) (logn 17 2))
(/ (logn 21 3) (logn 21 2))
(/ (logn 21 2) (logn 21 5))
(logn 17 2)
(logn 49 7)
(logn 21 7)
(logn 6 3)
(logn 12 3)
(logn 181 2)
(/ (logn 1000 181) (logn 1000 2))
(/ (logn 1000 2) (logn 1000 3))
(/ (logn 1000 2) (logn 1000 4))
(/ (logn 1000 2) (logn 1000 5))
(/ (logn 1000 2) (logn 1000 6))
(/ (logn 1000 2) (logn 1000 7))
(/ (logn 1000 2) (logn 1000 8))
(/ (logn 1000 2) (logn 1000 1000))
(/ (logn 1000 2) (logn 1000 999))
(/ (logn 1000 2) (logn 1000 242))
(/ (logn 100 2) (logn 100 3))
(/ (logn 100 2) (logn 100 4))
(/ (logn 100 2) (logn 100 5))
(/ (logn 100 2) (logn 100 6))
(/ (logn 100 2) (logn 100 7))
(/ (logn 100 2) (logn 100 10))
(/ (logn 100 2) (logn 100 111))
(/ (logn 100 2) (logn 100 11))
(/ (logn 100 2) (logn 100 100))
(/ (logn 121 2) (logn 121 121))
(/ (logn 181 2) (logn 181 181))
(/ (logn 144 2) (logn 144 144))
(/ (logn 144 2) (logn 144 12))
(/ (logn 36 2) (logn 36 6))
(/ (logn 16 2) (logn 16 4))
(/ (logn 25 2) (logn 25 5))
(/ (logn 25 5) (logn 25 2))
(/ (logn 25 6) (logn 25 2))
(/ (logn 25 8) (logn 25 2))
(/ (logn 25 10) (logn 25 2))
(/ (logn 25 25) (logn 25 2))
(/ (logn 25 26) (logn 25 2))
(logn 25 26)
(logn 28 2)
(logn 28 14)
(logn 30 15)
(logn 100 50)
(logn 500 1000)
(logn 1000 500)
(logn 1000000 500000)
(logn 20 10)
(logn 20 11)
(logn 20 7)
(Math/log 2)
(Math/log 3)
(/ (Math/log 2) (Math/log 3))
(/ (logn 10 2) (logn 10 3))
(/ (logn 10 3) (logn 10 2))
